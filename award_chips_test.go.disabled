package tammany

import (
	. "launchpad.net/gocheck"
)

func (s *MySuite) TestAwardChips(c *C) {
	g2.wardSetup()
	for _, p := range g2.Players() {
		c.Check(p.Chips, DeepEquals, Chips{Irish: 0, English: 0, German: 0, Italian: 0})
	}

	g2.resetChips()
	g2.awardChips()
	for _, p := range g2.Players() {
                switch p.ID() {
                case 0:
                        c.Check(p.Chips, DeepEquals, Chips{Irish: 0, English: 3, German: 0, Italian: 3})
                case 1:
                        c.Check(p.Chips, DeepEquals, Chips{Irish: 3, English: 0, German: 3, Italian: 0})
                case 2:
                        c.Check(p.Chips, DeepEquals, Chips{Irish: 0, English: 0, German: 0, Italian: 0})
                case 3:
                        c.Check(p.Chips, DeepEquals, Chips{Irish: 3, English: 0, German: 0, Italian: 0})
                }
	}
}

func (this *Game) wardSetup() {
	for _, w := range this.ActiveWards() {
		switch int(w.ID) {
		case 1:
			w.Immigrants = Nationals{Irish: 2, English: 1, German: 0, Italian: 1}
			w.Bosses = BossesMap{0: 0, 1: 1, 2: 0, 3: 0}
		case 2:
			w.Immigrants = Nationals{Irish: 0, English: 0, German: 2, Italian: 1}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 1, 3: 0}
		case 3:
			w.Immigrants = Nationals{Irish: 2, English: 0, German: 1, Italian: 1}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 1, 3: 0}
		case 4:
			w.Immigrants = Nationals{Irish: 0, English: 1, German: 0, Italian: 1}
			w.Bosses = BossesMap{0: 1, 1: 0, 2: 0, 3: 0}
		case 5:
			w.Immigrants = Nationals{Irish: 1, English: 2, German: 0, Italian: 1}
			w.Bosses = BossesMap{0: 1, 1: 0, 2: 0, 3: 0}
		case 6:
			w.Immigrants = Nationals{Irish: 0, English: 1, German: 1, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 1, 2: 0, 3: 0}
		case 7:
			w.Immigrants = Nationals{Irish: 1, English: 1, German: 1, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 1, 2: 0, 3: 0}
		case 8:
			w.Immigrants = Nationals{Irish: 2, English: 1, German: 0, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 0, 3: 1}
		case 9:
			w.Immigrants = Nationals{Irish: 0, English: 1, German: 2, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 1, 2: 0, 3: 0}
		case 10:
			w.Immigrants = Nationals{Irish: 0, English: 0, German: 0, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 0, 3: 0}
		case 11:
			w.Immigrants = Nationals{Irish: 0, English: 0, German: 0, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 0, 3: 0}
		case 13:
			w.Immigrants = Nationals{Irish: 0, English: 0, German: 0, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 0, 3: 0}
		case 14:
			w.Immigrants = Nationals{Irish: 1, English: 1, German: 0, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 0, 3: 1}
		case 15:
			w.Immigrants = Nationals{Irish: 0, English: 2, German: 0, Italian: 1}
			w.Bosses = BossesMap{0: 1, 1: 0, 2: 0, 3: 0}
		case 17:
			w.Immigrants = Nationals{Irish: 0, English: 0, German: 0, Italian: 0}
			w.Bosses = BossesMap{0: 0, 1: 0, 2: 0, 3: 0}
		}
	}
	return
}

func (this *Game) resetChips() {
	for _, p := range this.Players() {
		p.Chips = Chips{Irish: 0, English: 0, German: 0, Italian: 0}
	}
}
